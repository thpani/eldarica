(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-fun inv_main1_envLoop_main (Int Int Int Int Int Int) Bool)
(declare-fun inv_main3_envLoop_main (Int Int Int Int Int Int) Bool)
(declare-fun inv_main6_envLoop_main (Int Int Int Int Int Int) Bool)
(declare-fun inv_main9_envLoop_main (Int Int Int Int Int Int) Bool)
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (and (<= 0 (+ var1 (- 1))) (and (= 0 var2) (= var1 var0))) (and (<= 0 (+ var3 (- 1))) (and (= 0 var2) (= var3 var0))))) (inv_main1_envLoop_main var2 var0 0 (+ var3 (- 1)) 0 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (inv_main1_envLoop_main var5 var3 var4 var0 var1 var2)) (inv_main3_envLoop_main (+ var5 1) var3 var4 var0 var1 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (inv_main3_envLoop_main var3 var1 var0 var5 var2 var4)) (inv_main6_envLoop_main (+ var3 (- 1)) var1 var0 var5 var2 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (inv_main6_envLoop_main var5 var2 var3 var1 var4 var0)) (inv_main9_envLoop_main (+ var5 1) var2 var3 var1 var4 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main1_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var0 (- 1))))) (inv_main1_envLoop_main (+ var3 1) var2 (+ var1 1) (+ var0 (- 1)) var4 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main3_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var0 (- 1))))) (inv_main3_envLoop_main (+ var3 1) var2 (+ var1 1) (+ var0 (- 1)) var4 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main6_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var0 (- 1))))) (inv_main6_envLoop_main (+ var3 1) var2 (+ var1 1) (+ var0 (- 1)) var4 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main9_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var0 (- 1))))) (inv_main9_envLoop_main (+ var3 1) var2 (+ var1 1) (+ var0 (- 1)) var4 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main1_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var1 (- 1))))) (inv_main1_envLoop_main (+ var3 (- 1)) var2 (+ var1 (- 1)) var0 (+ var4 1) var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main3_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var1 (- 1))))) (inv_main3_envLoop_main (+ var3 (- 1)) var2 (+ var1 (- 1)) var0 (+ var4 1) var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main6_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var1 (- 1))))) (inv_main6_envLoop_main (+ var3 (- 1)) var2 (+ var1 (- 1)) var0 (+ var4 1) var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main9_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var1 (- 1))))) (inv_main9_envLoop_main (+ var3 (- 1)) var2 (+ var1 (- 1)) var0 (+ var4 1) var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main1_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var4 (- 1))))) (inv_main1_envLoop_main (+ var3 1) var2 var1 var0 (+ var4 (- 1)) (+ var5 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main3_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var4 (- 1))))) (inv_main3_envLoop_main (+ var3 1) var2 var1 var0 (+ var4 (- 1)) (+ var5 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main6_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var4 (- 1))))) (inv_main6_envLoop_main (+ var3 1) var2 var1 var0 (+ var4 (- 1)) (+ var5 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main9_envLoop_main var3 var2 var1 var0 var4 var5) (<= 0 (+ var4 (- 1))))) (inv_main9_envLoop_main (+ var3 1) var2 var1 var0 (+ var4 (- 1)) (+ var5 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main1_envLoop_main var6 var4 var2 var1 var0 var3) (and (and (= var6 var7) (= var4 var5)) (or (not (<= 0 var7)) (not (<= 0 (+ (+ var5 (* (- 1) var7)) (- 1))))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main3_envLoop_main var3 var4 var0 var6 var2 var1) (and (and (= var3 var7) (= var4 var5)) (or (not (<= 0 (+ var7 (- 1)))) (not (<= 0 (+ var5 (* (- 1) var7))))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main6_envLoop_main var4 var1 var7 var0 var5 var2) (and (and (= var4 var6) (= var1 var3)) (or (not (<= 0 var6)) (not (<= 0 (+ (+ var3 (* (- 1) var6)) (- 1))))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (not (and (inv_main9_envLoop_main var0 var2 var5 var3 var4 var1) (and (and (= var0 var7) (= var2 var6)) (or (not (<= 0 (+ var7 (- 1)))) (not (<= 0 (+ var6 (* (- 1) var7))))))))))
(check-sat)
