(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unknown)
(declare-fun inv_thr10_envLoop_thr (Int Int Int Int Int Int) Bool)
(declare-fun inv_thr11_envLoop_thr (Int Int Int Int Int Int) Bool)
(declare-fun inv_thr12_envLoop_thr (Int Int Int Int Int Int) Bool)
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (and (<= 0 (+ var3 (- 1))) (and (and (= 0 var4) (= 0 var1)) (= var3 var2))) (and (<= 0 (+ var0 (- 1))) (and (and (= 0 var4) (= 0 var1)) (= var0 var2))))) (inv_thr11_envLoop_thr var4 var1 var2 0 (+ var0 (- 1)) 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (inv_thr11_envLoop_thr var3 var1 var4 var0 var2 var5)) (inv_thr12_envLoop_thr var3 (+ var1 1) var4 var0 var2 var5))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (inv_thr12_envLoop_thr var4 var0 var5 var3 var2 var1)) (inv_thr10_envLoop_thr (+ var4 1) var0 var5 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_thr11_envLoop_thr var3 var0 var5 var4 var2 var1) (<= 0 (+ var2 (- 1))))) (inv_thr11_envLoop_thr var3 (+ var0 1) var5 (+ var4 1) (+ var2 (- 1)) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_thr12_envLoop_thr var3 var0 var5 var4 var2 var1) (<= 0 (+ var2 (- 1))))) (inv_thr12_envLoop_thr var3 (+ var0 1) var5 (+ var4 1) (+ var2 (- 1)) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_thr10_envLoop_thr var3 var0 var5 var4 var2 var1) (<= 0 (+ var2 (- 1))))) (inv_thr10_envLoop_thr var3 (+ var0 1) var5 (+ var4 1) (+ var2 (- 1)) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_thr11_envLoop_thr var3 var0 var5 var4 var2 var1) (<= 0 (+ var4 (- 1))))) (inv_thr11_envLoop_thr (+ var3 1) var0 var5 (+ var4 (- 1)) var2 (+ var1 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_thr12_envLoop_thr var3 var0 var5 var4 var2 var1) (<= 0 (+ var4 (- 1))))) (inv_thr12_envLoop_thr (+ var3 1) var0 var5 (+ var4 (- 1)) var2 (+ var1 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_thr10_envLoop_thr var3 var0 var5 var4 var2 var1) (<= 0 (+ var4 (- 1))))) (inv_thr10_envLoop_thr (+ var3 1) var0 var5 (+ var4 (- 1)) var2 (+ var1 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int)) (not (and (inv_thr12_envLoop_thr var3 var5 var1 var4 var6 var2) (and (and (and (= var3 var7) (= var5 var0)) (= var1 var8)) (or (not (<= 0 (+ (+ var0 (* (- 1) var7)) (- 1)))) (not (<= 0 (+ var8 (* (- 1) (+ var0 (* (- 1) var7))))))))))))
(check-sat)
